<!DOCTYPE html><html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Medium AI Tic Tac Toe</title>
  <style>
    * {
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(to right, #1d1d1d, #2e2e2e);
      color: #fff;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }
    .game {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 10px;
      background-color: #444;
      padding: 10px;
      border-radius: 12px;
      box-shadow: 0 0 30px rgba(0, 255, 255, 0.2);
    }
    .cell {
      background-color: #111;
      border-radius: 10px;
      font-size: 2.5rem;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      transition: background 0.3s;
    }
    .cell:hover {
      background-color: #1e1e1e;
    }
    .message {
      position: absolute;
      top: 20px;
      font-size: 1.5rem;
    }
    .reset {
      position: absolute;
      bottom: 30px;
      padding: 10px 20px;
      font-size: 1rem;
      border: none;
      background-color: teal;
      color: white;
      border-radius: 8px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="message" id="message">Your Turn</div>
  <div class="game" id="game"></div>
  <button class="reset" onclick="resetGame()">Restart</button>  <script>
    const game = document.getElementById("game");
    const message = document.getElementById("message");
    let board = Array(9).fill("");
    let currentPlayer = "X";
    let gameOver = false;

    function drawBoard() {
      game.innerHTML = "";
      board.forEach((val, idx) => {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        cell.textContent = val;
        cell.addEventListener("click", () => makeMove(idx));
        game.appendChild(cell);
      });
    }

    function makeMove(idx) {
      if (board[idx] !== "" || gameOver) return;
      board[idx] = currentPlayer;
      checkGame();
      if (!gameOver) {
        currentPlayer = "O";
        message.textContent = "AI is thinking...";
        setTimeout(aiMove, 500);
      }
      drawBoard();
    }

    function aiMove() {
      let emptyCells = board.map((v, i) => v === "" ? i : null).filter(v => v !== null);
      let move = null;

      // Try to win
      for (let i of emptyCells) {
        let temp = [...board];
        temp[i] = "O";
        if (checkWinner(temp) === "O") {
          move = i;
          break;
        }
      }

      // Block player
      if (move === null) {
        for (let i of emptyCells) {
          let temp = [...board];
          temp[i] = "X";
          if (checkWinner(temp) === "X") {
            move = i;
            break;
          }
        }
      }

      // Random choice if nothing else
      if (move === null) {
        move = emptyCells[Math.floor(Math.random() * emptyCells.length)];
      }

      board[move] = "O";
      checkGame();
      currentPlayer = "X";
      message.textContent = "Your Turn";
      drawBoard();
    }

    function checkWinner(bd) {
      const wins = [
        [0,1,2], [3,4,5], [6,7,8],
        [0,3,6], [1,4,7], [2,5,8],
        [0,4,8], [2,4,6]
      ];
      for (let [a, b, c] of wins) {
        if (bd[a] && bd[a] === bd[b] && bd[a] === bd[c]) return bd[a];
      }
      return null;
    }

    function checkGame() {
      let winner = checkWinner(board);
      if (winner) {
        message.textContent = `${winner} wins!`;
        gameOver = true;
        return;
      }
      if (!board.includes("")) {
        message.textContent = "Draw!";
        gameOver = true;
      }
    }

    function resetGame() {
      board = Array(9).fill("");
      currentPlayer = "X";
      gameOver = false;
      message.textContent = "Your Turn";
      drawBoard();
    }

    drawBoard();
  </script></body>
</html>
